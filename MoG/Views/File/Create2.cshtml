@model IList<MoG.Domain.Models.VMFileCreate>

@using (Html.BeginForm("Create3", "File", FormMethod.Post, new { @class = "form-inline" }))
{
    @Html.AntiForgeryToken()

    <div class="row" style="padding-bottom:4px;">
        <div class="col-lg-12">

            <button type="button" class="btn btn-default start" data-bind="click: btnSubmitClicked">
                <span class="glyphicon glyphicon-upload"></span>
                <span>@Resource.COMMON_Submit</span>
            </button>
            <a class="btn btn-warning cancel" href="#" data-bind="click : btnCancelClicked" role="button">
                <span class="glyphicon glyphicon-ban-circle"></span>
                <span>@Resource.COMMON_Cancel</span>
            </a>


        </div>
        </div>
    <div class="row">
        <div class="col-lg-12  ">
            <style>
                .smalltaginput {
                    width: 177px;
                }

                .filedescriptioninput {
                    width: 440px !important;
                }
            </style>

            @if (Model.Count > 0)
            {
                for (var i = Model.Count() - 1; i >= 0; i--)
                {
                    <div class="panel panel-default">
                        <div class="panel-body">
                            @Html.HiddenFor(f => f[i].Project.Id)
                            @Html.HiddenFor(f => f[i].File.Id)
                            <dl>
                                <dt>Name : <small><i class="glyphicon glyphicon-arrow-left"></i> as it will appear in the file list</small></dt>
                                <dd>@Html.TextBoxFor(f => f[i].File.DisplayName, new { @class = "form-control" }) </dd>
                                <dt>Tags : <small><i class="glyphicon glyphicon-arrow-left"></i> tags can be used to filter the file list, press enter after each tag</small></dt>
                                <dd class="smalltaginput">
                                    <input type="text" class="tm-input" data-hidden="@String.Format("FileTags{0}",i)" />
                                    @*@Html.TagsInputFor(f => f[i].File.Tags, "form-control left")*@ 
                                    @Html.HiddenFor(f => f[i].File.Tags, new { @id = "FileTags"+i})
                                </dd>

                                <dt>Description : </dt>
                                <dd>@Html.TextAreaFor(f => f[i].File.Description,new   { @class = "form-control filedescriptioninput" })</dd>
                            </dl>
                        </div>
                    </div>


                }
            }

        </div>
    </div>
}



@Scripts.Render("~/bundles/knockout")

<script>
    $(document).ready(function () {
        
        $('.tm-input').each(function () {

            $this = $(this);
            var hiddenInput =  $this.data('hidden');
            $this.tagsManager({ output: '#'+hiddenInput });
            //$this.tagsManager();
        });
    });
    function Create2VM() {

        var self = this;

        this.btnCancelClicked = function () {
            if (confirm("@Resource.COMMON_AreYouSure")) {
                var url = "@Url.Action("CancelUpload","File",new{id=ViewBag.ProjectId})";
                window.location.href = url;
            }
        };

        this.btnSubmitClicked = function () {
            //$('[data-role=tagsinput]').tagsinput('refresh');
            //var $taginputControl = $('[data-role=tagsinput]');
            //var $elt = $taginputControl.tagsinput('input');
            //if ($elt && $elt[0] && $elt[0].value != "") {
            //    //we have a pending tag, let's add it to the list
            //    if (/\S/.test($elt[0].value)) {
            //        // string is not empty and not just whitespace
            //        $taginputControl.tagsinput('add', $elt[0].value);
            //    }
            //}
            $("form").submit();
        };

    }

    ko.applyBindings(new Create2VM());

    $().ready(function () {
        $('[data-role=tagsinput]').tagsinput('refresh');
    });


</script>
